package edu.kit.wavelength.client.model.library;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import java.util.ArrayList;
import java.util.Arrays;

import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;

import edu.kit.wavelength.client.model.term.LambdaTerm;
import edu.kit.wavelength.client.model.term.parsing.ParseException;
import edu.kit.wavelength.client.model.term.parsing.Parser;

public class NaturalNumbersTest {

	private static Parser parser;
	private static NaturalNumbers library;

	/**
	 * Initializes the Library and the Parser.
	 */
	@Before
	public void setUp() {
		library = new NaturalNumbers(false);
		parser = new Parser(new ArrayList<Library>(Arrays.asList(library)));
	}

	@Test
	public void containsValidNumber() {
		for (int i = 0; i <= 1000; i++) {
			assertTrue(library.containsName(Integer.toString(i)));
		}

		library = new NaturalNumbers(true);
		for (int i = 0; i <= 1000; i++) {
			assertTrue(library.containsName(Integer.toString(i)));
		}
	}

	@Test
	public void containsInvalidNumber() {
		NaturalNumbers library = new NaturalNumbers(false);
		assertFalse(library.containsName("-1"));
		assertFalse(library.containsName("00"));
		assertFalse(library.containsName("008"));
		assertFalse(library.containsName("a"));
		assertFalse(library.containsName(""));
		assertFalse(library.containsName(null));
	}

	@Test
	public void containsNames() {
		String[] names = { "plus", "succ", "times", "pow", "pred", "minus" };

		for (String s : names) {
			assertTrue(library.containsName(s));
		}
	}

	@Ignore
	@Test
	public void termsCorrect() throws ParseException {
		CustomLibrary customLibrary = new CustomLibrary("");
		parser = new Parser(new ArrayList<Library>(Arrays.asList(customLibrary)));

		LambdaTerm plus = parser.parse("\\m.\\n.\\s.\\z.m s (n s z)");
		LambdaTerm succ = parser.parse("\\n.\\s.\\z.s (n s z)");
		LambdaTerm times = parser.parse("\\m.\\n.\\s.\\z.n (m s) z");
		LambdaTerm pow = parser.parse("\\m.\\n.\\s.\\z.n m s z");
		LambdaTerm pred = parser.parse("\\n.\\s.\\z.n (\\g.\\h.h (g s)) (\\u.z) (\\u.u)");
		LambdaTerm minus = parser.parse("\\m.\\n.(n (\\n.\\s.\\z.n (\\g.\\h.h (g s)) (\\u.z) (\\u.u))) m");

		LambdaTerm[] terms = { plus, succ, times, pow, pred, minus };
		String[] names = { "plus", "succ", "times", "pow", "pred", "minus" };

		// the library gives named terms. You can't compare named terms with terms generated by the parser
		assertEquals(terms.length, names.length);
		for (int i = 0; i < terms.length; i++) {
			assertEquals(library.getTerm(names[i]), terms[i]);
		}
	}
}
