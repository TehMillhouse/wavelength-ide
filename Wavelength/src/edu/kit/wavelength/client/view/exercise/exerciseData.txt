============
Exercise mode
------------
The current exercise's task will be displayed here. 
To show a solution for the current exercise press the lightbulb button to the right.
------------
To leave the exercise mode press the X button in the upper right corner.
---------
Some exercises will display prewritten terms for you to work with here.
============
Variables
------------
In lambda calculus, bound variables are variables enclosed in the body of an abstraction,
 while free variables are those not enclosed by an abstraction.
Note that the same variable may appear as a bound and as a free variable in the same term. 
Which variables in the displayed term are free?
Which are bound?
------------
The first v, and last x are free variables.
All other variables are bound.
---------
v ((λx. λv. (v x)) x)
============
Variables II
------------
Which variables in the displayed term are bound variables?
------------
The term's first x, second y, first v and fourth x are bound variables.
All other variables are free.
---------
(λx. x y)(λy. y x)((λv. x v) λx. x)
============
α-conversion
------------
α-conversion enables renaming variables bound by an abstraction with some restrictions to prevent the term from changing its structure: 
The renaming must not result in free variables becoming bound ones and only variables bound to the selected abstraction may be renamed. 
If a term can be transformed into another term only by α-renaming variables, the two terms are α-equivalent.
Knowing these restrictions which of these terms are α-equivalent to the first one?
------------
Only the first and fourth terms are α-equivalent.
---------
λx. (λx. y x) z
λz. (λx. y x) z
λx. (λy. y y) z
λx. (λv. y v) z
λy.(λx.y x) y
λx.(λz.y z) o
============
Normal Order
------------
If a λ-term contains multiple reducable expressions the question which to reduce first is answered by the applied reduction order  one of which is the normal reduction order. 
Using this reduction order the outermost leftmost redex is reduced first. 
In respect to the tree output format this is equivalent to traversing the term-tree according to a depth-first-search until one reaches a redex.
Which abstraction in the displayed term makes up the left part of the redex to reduce first?
You can check your answer by selecting normal order and reducing the term using the Step-Forward-Button.
------------
(λz. z) x
---------
λx. x((λz. z) x)((λv. v ((λz. x v) z)) j)
============
Applicative Order
------------
Applicative Order is the exact opposite of the normal reduction order: the innermost rightmost redex is reduced first. 
This means a redex is only reduced when it does not contain any redex itself. 
In respect to tree output no redex is reduced until all redexes in its subtree have been reduced.
Using applicative order which redex in the displayed term will be reduced first?
------------
(λv. x v) z  will be reduced first
---------
λx. x((λz. v z) x)((λv. v ((λv. x v) z))j)
============
Call-by-Name
------------
Call-by-Name reduction is similar to the normal reduction order: the outermost leftmost redex is reduced first.
Call-by-Name's major difference is the restriction that only redexes not enclosed in the body of an abstraction may be reduced.
This means that when using Call-by-Name a term might still contain redexes but will not be reduced further.
Using Call-by-Name which redex in the displayed term will be reduced first?
------------
(λz. ((λv. v x) x) z z)(u v) will be reduced first.
---------
(λz. ((λv. v x) x) z z)(u v)(λx. x)u
============
Call-by-Value
------------
Just like Call-by-Name using the Call-by-Value reduction order the outermost leftmost redex is reduced first and redexes enclosed by an abstraction will never be reduced but in addition this reduction order demands that the right side of aredex has to be a value if it is to be reduced.
"Value" refers to a lambda term that can not be reduced any further meaning that it is either a variable or an abstraction.
Using call-by-value which redex in the displayed term will be reduced first?
------------
(λx. x)(λz. z x)
------------
(λv. v v)(a b)((λx. x)(λz. z x))
============
Church Booleans
------------
Read the explanation and define the logical connectives "not", "and", "or".
Translate the expression "if (!C1 && (C2 || C3)) { A } else { B }" into a lambda-calculus expression.
------------
------------
-- The Church-encoding of boolean values
-- Technically, any definition that allows differentiating between two values (one for true, one for false)
-- could be used to encode booleans, but traditionally, the following two definitions are used:
true  = λt. λf. t
false = λt. λf. f
-- i.e. "true" is a function taking two parameters, and returning the first, and "false" is a similar function
-- returning the second parameter. (true a b) =>* a, and similarly (false a b) =>* b.

-- This is useful because a functional if-C-then-A-else-B construct becomes (C A B)
-- (If C evaluates to 'λt.λf. t', the whole expression will evaluate to the result of A, if C evaluates to 'λt.λf. f',
-- it will evaluate to the result of B)

not = 
and = 
or = 

C1 = true
C2 = false
C3 = false
expr = ...
===============
Example: isPrime
---------------
Example: checks whether a number is prime or not.
Requires an implementation of natural numbers, booleans, and the Y combinator
---------------
---------------
isZero = λn. n (λp. false) (true)
-- Two natural numbers are equal if they are both zero or their predecessors are equal
eq = Y (λeq. λn. λm. isZero n (isZero m) (isZero m false (eq (pred n) (pred m))))

-- (a < b) if (a-b) = 0 and (b-a) != 0 (for natural numbers)
less = λa. λb. (isZero (minus a b)) (isZero (minus b a) false true) false
-- Euler's algorithm for divisibility
divides = Y (λdivides. λa. λb. isZero b true ((less b a) false (divides a (minus b a))))

-- Tries out all number up to acc as divisors for n
isPrimeUpTo = Y (λisPrimeUpTo. λn. λacc. isZero (pred acc) true (divides acc n false (isPrimeUpTo n (pred acc))))
isPrime = λn. isZero (pred n) false (isPrimeUpTo n (pred n))

isPrime 5
==============
Example: Collatz function
--------------
Example: A function which, given a church number n, computes the elements of the collatz series for that number until it converges to 1.
(Assuming the Collatz conjecture holds, this function is a constant function of value 1)
--------------
--------------
not = λa. a false true
even = λn. n not true
leq = λn. n (λf.λz. z (f false) false) (λz. true) true;
div2 = λn.λs.λz. n (λn.λb. b (s (n false)) (n true)) (λn. z) false
collatz = Y (λcollatz.λn. leq n n (even n (collatz (div2 n)) (collatz (succ (times 3 n)))))
